%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.0a
%%CreationDate: Wed Apr  5 10:55:40 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AmCYYUYCVGRRGGCCCCCCCHMAAUCCUGuuGUGCYURAUUCagAGRGUUGGGuGGAGGMUYUCCU-RARRRKCUc\
) } def
/len { sequence length } bind def

/coor [
[105.77420044 330.75265503]
[115.03166962 317.65002441]
[113.82466888 302.69866943]
[112.61766815 287.74731445]
[111.41067505 272.79595947]
[110.20367432 257.84460449]
[108.99667358 242.89323425]
[95.78205109 232.69660950]
[93.86004639 215.78019714]
[104.87395477 202.36235046]
[103.06590271 187.47171021]
[101.25785065 172.58108521]
[99.44980621 157.69044495]
[97.64175415 142.79981995]
[95.83370209 127.90917969]
[94.02565002 113.01854706]
[85.78049469 101.72656250]
[91.08371735 88.78950500]
[89.27566528 73.89887238]
[79.93135071 61.13194656]
[86.07813263 47.56484222]
[84.27008057 32.67420578]
[82.46203613 17.78357506]
[80.65398407 2.89294124]
[78.84593201 -11.99769211]
[77.03787994 -26.88832474]
[75.22983551 -41.77895737]
[73.42178345 -56.66959000]
[71.61373138 -71.56022644]
[67.37015533 -79.96975708]
[70.04517365 -87.08529663]
[68.83818054 -102.03665924]
[67.63117981 -116.98801422]
[53.97564316 -124.16645050]
[46.38872147 -137.59933472]
[47.29137039 -153.00025940]
[56.39556122 -165.45487976]
[70.79617310 -170.98893738]
[85.89802551 -167.83656311]
[96.88217926 -157.00364685]
[100.24362183 -141.94694519]
[94.90973663 -127.47099304]
[82.58253479 -118.19501495]
[83.78953552 -103.24365997]
[84.99653625 -88.29229736]
[86.50436401 -73.36827087]
[88.31241608 -58.47764206]
[90.12046814 -43.58700943]
[91.92851257 -28.69637489]
[93.73656464 -13.80574226]
[95.54461670 1.08489096]
[97.35266876 15.97552395]
[99.16071320 30.86615753]
[100.96876526 45.75679016]
[110.18375397 57.45863724]
[104.16629791 72.09082031]
[105.97434998 86.98145294]
[114.21950531 98.27343750]
[108.91628265 111.21049500]
[110.72433472 126.10112762]
[112.53238678 140.99176025]
[114.34043884 155.88240051]
[116.14848328 170.77302551]
[117.95653534 185.66366577]
[119.76458740 200.55429077]
[131.37680054 207.69931030]
[136.59410095 220.08319092]
[133.68173218 233.00068665]
[123.94803619 241.68623352]
[125.15503693 256.63760376]
[126.36203003 271.58895874]
[127.56903076 286.54031372]
[128.77603149 301.49166870]
[129.98303223 316.44302368]
[141.22242737 327.89099121]
[139.13674927 343.79788208]
[125.32595825 351.96133423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[18 57]
[19 56]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[31 45]
[32 44]
[33 43]
] def

init

% Start Annotations
3 73 0.16 0.2 colorpair
4 72 0.32 1 colorpair
5 71 0.16 1 colorpair
6 70 0.0 0.2 colorpair
7 69 0.32 1 colorpair
10 65 0.16 1 colorpair
11 64 0.32 1 colorpair
12 63 0.16 0.2 colorpair
13 62 0.16 1 colorpair
14 61 0.0 0.2 colorpair
16 59 0.0 1 colorpair
18 57 0.0 1 colorpair
19 56 0.0 1 colorpair
21 54 0.0 1 colorpair
22 53 0.32 1 colorpair
23 52 0.16 1 colorpair
24 51 0.16 1 colorpair
25 50 0.16 1 colorpair
26 49 0.16 1 colorpair
27 48 0.16 1 colorpair
28 47 0.0 0.2 colorpair
29 46 0.0 1 colorpair
31 45 0.0 0.2 colorpair
32 44 0.0 0.2 colorpair
33 43 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 74 4 gmark
2 cmark
74 cmark
3 73 2 gmark
3 cmark
73 cmark
4 cmark
72 cmark
5 cmark
71 cmark
6 70 2 gmark
7 cmark
69 cmark
65 cmark
11 cmark
64 cmark
12 63 2 gmark
12 cmark
63 cmark
13 cmark
62 cmark
14 61 2 gmark
15 60 4 gmark
22 cmark
53 cmark
23 cmark
52 cmark
24 cmark
51 cmark
25 cmark
50 cmark
26 cmark
27 cmark
48 cmark
28 47 2 gmark
31 45 2 gmark
32 44 2 gmark

% End Annotations
showpage
end
%%EOF
